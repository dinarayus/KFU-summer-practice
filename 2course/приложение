// ================================================
// –ü—Ä–æ–µ–∫—Ç WPF "CauchySolverApp"
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
//  - –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ö–æ—à–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≠–π–ª–µ—Ä–∞
//  - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ)
//  - –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: x, y_numeric, y_exact, |error|
//  - –ì—Ä–∞—Ñ–∏–∫ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏–π (LiveCharts)
//  - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ –æ—à–∏–±–æ–∫
// ================================================

// --- Solver.cs ---
using System;
using System.Collections.Generic;

namespace CauchySolverApp
{
    public static class Solver
    {
        // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –û–î–£: y' = -|x^2 + 1| * sqrt(1 - y^2)
        public static double F(double x, double y)
        {
            double under = 1 - y * y;
            if (under < 0)
                throw new ArgumentException("–ü–æ–¥–∫–æ—Ä–µ–Ω–Ω–æ–µ 1 - y^2 < 0");
            return -Math.Abs(x * x + 1) * Math.Sqrt(under);
        }

        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≠–π–ª–µ—Ä–∞
        public static List<(double x, double y)> ModifiedEuler(double x0, double y0, double xn, double h)
        {
            var list = new List<(double x, double y)>();
            double x = x0, y = y0;
            list.Add((x, y));
            while (x < xn)
            {
                double k1 = F(x, y);
                double yPred = y + h * k1;
                double k2 = F(x + h, yPred);
                y += 0.5 * h * (k1 + k2);
                x += h;
                list.Add((x, y));
            }
            return list;
        }

        // –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏?
        // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ ...
        // (–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ: y_exact = sin(c - sinh^{-1}(x)) )
        public static double Exact(double x)
        {
            // –ó–¥–µ—Å—å c = pi/2 - arcsin(y0)
            double c = Math.Asin(0.95);
            return Math.Sin(c - Math.Asinh(x));
        }
    }
}

// --- MainWindow.xaml ---
/*
<Window x:Class="CauchySolverApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
        Title="Cauchy Solver" Height="600" Width="800">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <!-- Input fields -->
            <TextBlock Text="x0:" VerticalAlignment="Center"/>
            <TextBox x:Name="X0Box" Width="60" Text="0" Margin="5,0"/>
            <TextBlock Text="y0:" VerticalAlignment="Center"/>
            <TextBox x:Name="Y0Box" Width="60" Text="0.95" Margin="5,0"/>
            <TextBlock Text="xn:" VerticalAlignment="Center"/>
            <TextBox x:Name="XnBox" Width="60" Text="3.1416" Margin="5,0"/>
            <TextBlock Text="h:" VerticalAlignment="Center"/>
            <TextBox x:Name="HBox" Width="60" Text="0.05" Margin="5,0"/>
            <Button Content="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" Click="OnCalculate" Margin="20,0"/>
        </StackPanel>

        <!-- Chart area -->
        <lvc:CartesianChart x:Name="Chart" Grid.Row="1">
            <lvc:CartesianChart.Series>
                <lvc:LineSeries Title="–ß–∏—Å–ª–µ–Ω–Ω–æ–µ" Values="{Binding NumericValues}" PointGeometrySize="5"/>
                <lvc:LineSeries Title="–¢–æ—á–Ω–æ–µ" Values="{Binding ExactValues}" PointGeometrySize="5"/>
            </lvc:CartesianChart.Series>
        </lvc:CartesianChart>

        <!-- DataGrid for table -->
        <DataGrid x:Name="Table" AutoGenerateColumns="False" Grid.Row="2">
            <DataGrid.Columns>
                <DataGridTextColumn Header="x" Binding="{Binding X, StringFormat=F4}"/>

Dinaraüí∏, [16.06.2025 16:43]
<DataGridTextColumn Header="y_num" Binding="{Binding YNumeric, StringFormat=F6}"/>
                <DataGridTextColumn Header="y_exact" Binding="{Binding YExact, StringFormat=F6}"/>
                <DataGridTextColumn Header="|error|" Binding="{Binding Error, StringFormat=F6}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
*/

// --- MainWindow.xaml.cs ---
using System;
using System.Collections.ObjectModel;
using System.Windows;
using LiveCharts;
using LiveCharts.Wpf;

namespace CauchySolverApp
{
    public partial class MainWindow : Window
    {
        public ChartValues<double> NumericValues { get; set; } = new ChartValues<double>();
        public ChartValues<double> ExactValues { get; set; } = new ChartValues<double>();
        public ObservableCollection<PointData> TableData { get; set; } = new ObservableCollection<PointData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            Table.ItemsSource = TableData;
        }

        private void OnCalculate(object sender, RoutedEventArgs e)
        {
            try
            {
                double x0 = double.Parse(X0Box.Text);
                double y0 = double.Parse(Y0Box.Text);
                double xn = double.Parse(XnBox.Text);
                double h  = double.Parse(HBox.Text);

                var numeric = Solver.ModifiedEuler(x0, y0, xn, h);

                Chart.Series.Clear();
                NumericValues.Clear();
                ExactValues.Clear();
                TableData.Clear();

                var numSeries = new LineSeries { Title = "–ß–∏—Å–ª–µ–Ω–Ω–æ–µ", Values = new ChartValues<double>() };
                var exSeries  = new LineSeries { Title = "–¢–æ—á–Ω–æ–µ",    Values = new ChartValues<double>() };

                foreach (var (x, y) in numeric)
                {
                    double yEx = Solver.Exact(x);
                    numSeries.Values.Add(y);
                    exSeries.Values.Add(yEx);
                    TableData.Add(new PointData { X = x, YNumeric = y, YExact = yEx, Error = Math.Abs(y - yEx) });
                }

                Chart.Series.Add(numSeries);
                Chart.Series.Add(exSeries);
            }
            catch (Exception ex)
            {
                MessageBox.Show("–û—à–∏–±–∫–∞: " + ex.Message, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }

    public class PointData
    {
        public double X { get; set; }
        public double YNumeric { get; set; }
        public double YExact { get; set; }
        public double Error { get; set; }
    }
}

// ================================================
// –î–ª—è —Å–±–æ—Ä–∫–∏:
// 1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç LiveCharts.Wpf —á–µ—Ä–µ–∑ NuGet.
// 2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç ‚Äî –ø–æ–ª—É—á–∏—Ç–µ GUI —Å –≤–≤–æ–¥–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–±–ª–∏—Ü–µ–π –∏ –≥—Ä–∞—Ñ–∏–∫–æ–º.
// ================================================
